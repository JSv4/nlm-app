import { render, screen } from '@testing-library/react';

import WorkspaceEditor from '../components/WorkspaceEditor';
import * as AuthUtils from '../utils/use-auth.js';

// mock user auth from utils
const mockUser = {};
jest.spyOn(AuthUtils, 'useAuth').mockImplementation(() => {
  return mockUser;
});

// mock window.matchMedia
global.matchMedia =
  global.matchMedia ||
  function () {
    return {
      addListener: jest.fn(),
      removeListener: jest.fn(),
    };
  };

describe('WorkspaceEditor', () => {
  it('renders', () => {
    render(<WorkspaceEditor />);
    expect(screen).toBeTruthy();
  });

  it('matches HTML snapshot', () => {
    render(<WorkspaceEditor />);
    expect(screen).toMatchSnapshot();
  });

  // I can't seem to be able to select the modal, let alone the button. Ant Design has buried the element too deep for React Testing
  // Library to see it. I don't know how to get around this, because I can't even add a test-id to the element since it's automatically
  // generated by antd. All antd adds to the element is a className, and you can't select based on className (it's bad practice).
  // These are the available elements:
  //   Name "":
  //   <body />
  //
  //    Name "":
  //    <div />
  //
  //    Name "":
  //    <div
  //      class="ant-modal-root"
  //    />
  //
  //    Name "":
  //    <div
  //      class="ant-modal-mask ant-modal-mask-hidden"
  //    />
  // The only thing I can think of would be to replace or remove antd components that are causing trouble...
  // it('doesn\'t allow blank email', () => {
  //   render(<WorkspaceEditor />);
  //   const modal = screen.getByRole('dialog');
  //   fireEvent(within(modal).getByRole('button', {name: 'Add Collaborator'}), new MouseEvent('click'));
  // });
});
